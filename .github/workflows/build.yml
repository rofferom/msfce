name: Build
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  clang-format:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v1
      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run clang-format
        run: ./scripts/clang_format.sh check
  build-linux:
    needs: clang-format
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - uses: n1hility/cancel-previous-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Fetch submodules
      run: git submodule update --init --recursive
    - name: Install required system packages
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libsdl2-dev libepoxy-dev libglm-dev \
          libavcodec-dev libavutil-dev libavformat-dev libswscale-dev
    - name: Run cmake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
    - name: Build
      run: |
        cd build
        make -j2
    - uses: actions/upload-artifact@v2
      with:
        name: msfce-linux-x64
        path: build/msfce
  build-mingw64:
    needs: clang-format
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - uses: n1hility/cancel-previous-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Fetch submodules
      run: git submodule update --init --recursive
    - name: Install required system packages
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          mingw-w64 meson ninja-build nasm
    - name: Cache build dependencies
      uses: actions/cache@v2
      env:
        cache-name: cache-build-dependencies
      with:
        path: mingw64/x86_64-w64-mingw32
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('mingw64/build_deps.sh') }}
    - name: Build dependencies
      run: (test -d mingw64/x86_64-w64-mingw32 && echo Build dependencies found, skip rebuild) || ./mingw64/build_deps.sh
    - name: Run cmake
      run: |
        export PKG_CONFIG_LIBDIR=$(pwd)/mingw64/x86_64-w64-mingw32/lib/pkgconfig
        mkdir build
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../mingw64/toolchain.cmake -DCMAKE_BUILD_TYPE=Release ..
    - name: Build
      run: |
        cd build
        make -j2
        x86_64-w64-mingw32-strip msfce.exe *.dll
    - uses: actions/upload-artifact@v2
      with:
        name: msfce-windows-x64
        path: |
          build/msfce.exe
          build/*.dll
